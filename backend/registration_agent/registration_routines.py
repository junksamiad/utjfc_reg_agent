class RegistrationRoutines:
    """
    Manages the step-by-step routine messages for new player registration flow.
    These messages get dynamically injected into the agent's system prompt based on routine_number.
    """
    
    ROUTINES = {
        1: """Task: Your current task is to: 1) take the parent's first and last name which should result in at least 2 parts (first name + last name) 2) validate that it contains only letters, apostrophes, hyphens, and spaces - convert any curly apostrophes (', ', etc.) to straight apostrophes (') 3) ensure it's at least 2 words long and not just single letters 4) if invalid format or too short, set routine_number = 1 and ask for clarification but do not mention validation checks 5) if valid, set routine_number = 2 and referring to the parent by FIRST NAME only, ask for their child's first and last name.""",
        
        2: """Task: Your current task is to: 1) take the child's first and last name which should result in at least 2 parts (first name + last name) 2) validate that it contains only letters, apostrophes, hyphens, and spaces - convert any curly apostrophes (', ', etc.) to straight apostrophes (') 3) ensure it's at least 2 words long and not just single letters 4) if invalid format or too short, set routine_number = 2 and ask for clarification but do not mention validation checks 5) if valid, set routine_number = 3 and ask for their child's date of birth.""",
        
        3: """Task: Your current task is to: 1) take the child's date of birth 2) accept any date format (DD/MM/YYYY, MM/DD/YYYY, DD-MM-YYYY, etc.) and convert to DD-MM-YYYY format 3) validate that birth year is 2007 or later (club rule), not in the future, and is a real date 4) if invalid date or before 2007, set routine_number = 3 and ask for clarification but do not mention validation checks 5) if valid, set routine_number = 4 and ask for their child's gender.""",
        
        4: """Task: Your current task is to: 1) take the child's gender response 2) ensure the response is one of: 'Male', 'Female', or 'Not disclosed' (accept variations like 'boy/girl', 'man/woman', 'prefer not to say', etc. and normalize them) 3) If the response cannot be understood or normalized, set routine_number = 4 and ask for clarification 4) If a valid gender is provided, set routine_number = 5 and ask whether their child has any known medical issues that the club should be aware of.""",
        
        5: """Task: Your current task is to: 1) take the response about whether the child has any known medical issues 2) accept Yes/No response (normalize 'y', 'yeah', 'nope', etc.) 3) if Yes, ask for details and structure into a clean list separated by commas - remove prefixes like 'has', 'suffers from' and capitalize properly 4) **IMPORTANT**: if any serious medical conditions are mentioned (allergies requiring EpiPen/medication, asthma inhaler, diabetes, epilepsy, heart conditions, etc.), ask one simple follow-up question: 'Is there anything important we need to know about this condition, such as where inhalers or EpiPens are kept, or any other important information for our managers?' 5) keep it simple - don't dig too deep or ask multiple detailed questions. The parent remains responsible for their child's medical care. Just capture any important practical information they want to share 6) if unclear yes/no or missing details when Yes, set routine_number = 5 and ask for clarification 7) if valid response provided, set routine_number = 6 and ask whether the child played for Urmston Town last season (2024-25).""",
        
        6: """Task: Your current task is to: 1) take the response about whether the child played for Urmston Town last season (2024-25) 2) accept a Yes/No response 3) if No, ask if they played for any team last season, and if so, ask for the name of the team and capture it as provided (no validation needed) 4) set routine_number = 7 and ask for the parent's relationship to {child_name}.""",
        
        7: """Task: Your current task is to: 1) take the parent's relationship to {child_name} 2) accept variations and normalize to one of these exact values: 'Mother', 'Father', 'Guardian', 'Other' - convert common variations like 'mum/mam/mom' to 'Mother', 'dad/daddy' to 'Father', 'gran/grandma/granny/grandfather/grandad' to 'Other', etc. 3) if the relationship cannot be normalized to one of the four values, set routine_number = 7 and ask for clarification 4) if a valid relationship is provided, set routine_number = 8 and ask for their mobile telephone number.""",
        
        8: """Task: Your current task is to: 1) take the parent's mobile telephone number (it MUST be a mobile number so we can send them the payment link via SMS later in the process) 2) validate it follows UK format: mobile starts with 07 and has exactly 11 digits 3) remove any spaces, dashes, or brackets and check the format 4) if invalid format, set routine_number = 8 and ask them to provide a valid UK mobile number (07...) - explain that it must be a mobile number as we will send them important SMS messages 5) if valid, set routine_number = 9 and ask for their email address.""",
        
        9: """Task: Your current task is to: 1) take the parent's email address 2) validate it contains exactly one @ symbol and at least one dot after the @ (format: something@something.something) 3) convert the entire email to lowercase 4) if invalid format, set routine_number = 9 and ask for a valid email address 5) if valid, set routine_number = 10 and ask for their consent to contact them by email and SMS with club comms throughout the season.""",
        
        10: """Task: Your current task is to: 1) take the parent's response about consent to contact them by email and SMS with club comms 2) accept Yes/No response (normalize 'yes', 'yeah', 'ok', 'sure', 'no problem' to 'Yes' and 'no', 'nope', 'don't want to' to 'No') 3) explain this covers general club communications 4) if unclear response, set routine_number = 10 and ask for clarification 5) if consent given (Yes or No), set routine_number = 11 and ask for their date of birth.""",
        
        11: """Task: Your current task is to: 1) take the parent's date of birth 2) accept any date format but convert to DD-MM-YYYY format 3) validate the date is reasonable (not in future, not before 1900) 4) if invalid or unclear date, set routine_number = 11 and ask for clarification 5) if valid, set routine_number = 12 and ask for their postcode.""",
        
        12: """Task: Your current task is to: 1) take the parent's postcode 2) clean it (remove spaces, convert to uppercase) and validate it's UK format 3) if postcode looks invalid (not UK format), set routine_number = 12 and ask for clarification 4) if valid postcode provided, set routine_number = 13 and ask for their house number.""",
        
        13: """Task: Your current task is to: 1) take the parent's house number 2) accept any format (numbers, letters, flat numbers like '12a', '5B', 'Flat 2', etc.) 3) if house number seems unclear, set routine_number = 13 and ask for clarification 4) if house number provided and seems ok, use the function 'address_lookup' with the postcode and house number to find their full address 5) if no address returned or lookup failed, then set routine_number = 14 and ask them to enter their full address manually 6) if address returned successfully, set routine_number = 15 and show them the formatted address asking for confirmation that it's correct.""",
        
        14: """Task: Your current task is to: 1) take the parent's manually entered full address 2) do a visual check to ensure it looks like a valid UK address format: has house number/name, street name, area/town, and UK postcode (2 letters, 1-2 numbers, space, 1 number, 2 letters like M32 8JL) 3) check it includes Manchester/Stretford/Urmston area or other recognizable UK location 4) if the address looks incomplete, badly formatted, or not UK, set routine_number = 14 and ask for a more complete address 5) if the address looks reasonable and complete, set routine_number = 15 and show them the address asking for confirmation that it's correct.""",
        
        15: """Task: Your current task is to: 1) take the response about whether the shown address is correct 2) accept Yes/No response (normalize 'yes', 'correct', 'right', 'that's it' to 'Yes' and 'no', 'wrong', 'not right', 'incorrect' to 'No') 3) if they say No or the address is wrong, set routine_number = 14 and ask them to provide their correct full address manually 4) if they confirm Yes or the address is correct, set routine_number = 16 and ask if {child_name} lives at the same address.""",
        
        16: """Task: Your current task is to: 1) take the response about whether {child_name} lives at the same address as the parent 2) accept Yes/No response (normalize 'yes', 'yeah', 'same address', 'lives with me' to 'Yes' and 'no', 'nope', 'different address', 'lives elsewhere' to 'No') 3) if unclear response or can't determine Yes/No, set routine_number = 16 and ask for clarification 4) if Yes, set routine_number = 22 (DO NOT ask a question - server will handle routing) 5) if No, set routine_number = 18 and ask for {child_name}'s address.""",
        
        17: """UNUSED - This routine is not used in the current flow.""",
        
        18: """Task: Your current task is to: 1) take {child_name}'s postcode (since they live at a different address from the parent) 2) clean it (remove spaces, convert to uppercase) and validate it's UK format 3) if postcode looks invalid (not UK format), set routine_number = 18 and ask for clarification 4) if valid postcode provided, set routine_number = 19 and ask for {child_name}'s house number.""",
        
        19: """Task: Your current task is to: 1) take {child_name}'s house number 2) accept any format (numbers, letters, flat numbers like '12a', '5B', 'Flat 2', etc.) 3) if house number seems unclear, set routine_number = 19 and ask for clarification 4) if house number provided and seems ok, use the function 'address_lookup' with the postcode and house number to find {child_name}'s full address 5) if no address returned or lookup failed, then set routine_number = 20 and ask them to enter {child_name}'s full address manually 6) if address returned successfully, set routine_number = 21 and show them the formatted address asking for confirmation that it's {child_name}'s correct address.""",
        
        20: """Task: Your current task is to: 1) take {child_name}'s manually entered full address 2) do a visual check to ensure it looks like a valid UK address format: has house number/name, street name, area/town, and UK postcode (2 letters, 1-2 numbers, space, 1 number, 2 letters like M32 8JL) 3) check it includes Manchester/Stretford/Urmston area or other recognizable UK location 4) if the address looks incomplete, badly formatted, or not UK, set routine_number = 20 and ask for a more complete address for {child_name} 5) if the address looks reasonable and complete, set routine_number = 21 and show them the address asking for confirmation that it's {child_name}'s correct address.""",
        
        21: """Task: Your current task is to: 1) take the response about whether the shown child address is correct 2) accept Yes/No response (normalize 'yes', 'correct', 'right', 'that's it' to 'Yes' and 'no', 'wrong', 'not right', 'incorrect' to 'No') 3) if they say No or the address is wrong, set routine_number = 20 and ask them to provide {child_name}'s correct full address manually 4) if Yes, set routine_number = 22 (DO NOT ask a question - server will handle routing).""",
        
        22: """Task: Your current task is to: 1) look through the conversation history for age group information (look for 'Age group: U##' in system messages) 2) if age group is U16 or above, set routine_number = 23 and explain that since {child_name} is 16+, you need to take a telephone number and email for them which is different from their parents telephone number and email, then ask if you can start by taking {child_name}'s mobile phone number 3) if age group is under U16, set routine_number = 28 thank them for all the information they have given you so far, list all the info you have collected and ask them to confirm all the details are correct. When listing the information you have collected, ensure you show the validated data rather than the exact responses they gave. For example, if they said gender = boy, and you validated this as gender = male, then list the value as male.""",
        
        # Age-based routing will intervene after routine 22 
        # These routines are for U16-U18 age groups (child's separate contact details)
        23: """Task: Your current task is to: 1) take {child_name}'s mobile phone number 2) validate it's a UK mobile number format (starts with 07 and has 11 digits) 3) check through conversation history that this phone number is different from the parent's phone number (look for previously collected parent contact details) 4) if invalid format, set routine_number = 23 and ask for clarification 5) if it's the same as the parent's phone number, set routine_number = 23 and explain that you need {child_name}'s own mobile number which must be different from their parent's number 6) if valid and different from parent's phone, set routine_number = 24 and ask for {child_name}'s email address.""",
        
        24: """Task: Your current task is to: 1) take {child_name}'s email address 2) validate it has proper email format (contains @ and domain) and is not the same as the parent's email address 3) if invalid email format, set routine_number = 24 and ask for a valid email address for {child_name} 4) if valid email, set routine_number = 28 and thank them for all the information they have given you so far, list all the info you have collected and ask them to confirm all the details are correct.""",
        
        25: """UNUSED - This routine is not used in the current flow.""",
        
        26: """UNUSED - This routine is not used in the current flow.""",
        
        27: """UNUSED - This routine is not used in the current flow.""",
        
        # Universal validation routine (both age groups converge here)
        28: """Task: Your current task is to: 1) take their response about whether all the information is correct 2) if they say No or want to make changes, DO NOT proceed to step 3 below. Instead, set routine_number = 28, ask what needs to be corrected and take the new or updated information. You only need to show the changes made when reconfirming any changed data. 3) if they confirm all information is correct, set routine_number = 29 and explain that you now need to take a one-off annual signing-on fee of £1, and also setup a Direct Debit monthly subscription fee of £1. To do this you will send them a payment link via SMS, which will allow them to make payment and setup a monthly subscription payment via Direct Debit at their convenience. Advise that the monthly subscription is for September to May only (9 months). Before you move on, ask them for their preferred payment day so you can set up the payment link. Advise that this can be any day in the month, or the last day of each month.""",
        
        29: """Task: Your current task is to: 1) take their preferred payment day. This can be any day in the month, or the last day of each month. If it's the last day of the month then the value will be recorded as -1 as this is how our GoCardless payment system handles the last day of any month 2) if they do not provide a valid preferred payment day, set routine_number = 29 and ask for a valid payment day. DO NOT proceed to step 3 below until you have received a VALID preferred payment day 3) if they do provide a valid payment day, call the function create_payment_token which will create a GoCardless billings_request_id and return payment amounts 4) once you have created the id and received the payment amounts (look for signing_fee_amount_pounds and monthly_amount_pounds in the result), run the function update_reg_details_to_db which will write all the registration info you have captured so far plus the payment amounts to the registrations_2526 db table. Then set routine_number = 30, advise them that a payment link has now been sent to them via SMS and ask them to confirm if they have received the payment link or not. This is the only question we need to ask here. As the link was sent by SMS DO NOT advise them to check spam, or advise we can resend.""",
        
        30: """Task: Your current task is to: 1) take their response as to whether or not they have received the payment link via SMS. 2) if they indicate they have not, then advise them to email admin@urmstontownjfc.co.uk and someone will get back to them and assist. Never offer to resend by email, or resend the SMS as we can't currently do that. The only way we can help is if they email us. 3) if they indicate they have received the payment link via SMS, bring to their attention that we still have some information to collect from them in this chat, but remind them that within the next 7 days, they MUST click the link in the SMS message, make payment and setup subscription in order to be registered. Until payment is made and Direct Debit setup they WILL NOT be registered and may miss out on the team if spaces fill up. 4) In either scenario of them indicating they have received or not received the payment link, the next thing to do is to determine whether they need a new kit. To do this, check your conversation history to see if they if they answered 'No', to being asked whether their child played for Urmston Town last season. If they did imply 'No' to that question, set routine_number = 32, then ask them to choose a kit size for their child. The kits come in size ranges by age as follows: 5/6, 7/8, 9/10, 11/12, 13/14, and then S up to 3XL. Either recommend a size based on the child's age group, querying whether the child may require a bigger size than expected, or alternatively, show all the kit sizes in a markdown table and ask them to choose one. 5) If in the conversation history they did imply their child played for Urmston Town last season, then call the function check_if_kit_needed to see whether their team is due a new kit. If the result returned implies 'No', then set routine = 34 and explain that next they need to upload a passport-style photo for ID purposes by clicking the + symbol in the chat window and uploading a file. 6) If the result retuned from the check_if_kit_needed function implies 'Yes', then, set routine_number = 32, then ask them to choose a kit size for their child. The kits come in size ranges by age as follows: 5/6, 7/8, 9/10, 11/12, 13/14, and then S up to 3XL. Either recommend a size based on the child's age group, querying whether the child may require a bigger size than expected, or alternatively, show all the kit sizes in a markdown table and ask them to choose one.""",
        
        32: """Task: Your current task is to: 1) take their response for the kit size selection 2) validate that the response matches one of the valid kit sizes: 5/6, 7/8, 9/10, 11/12, 13/14, S, M, L, XL, 2XL, or 3XL (accept variations like '5-6', '5 to 6', '7-8', '9-10', etc. and normalize them to the correct format with forward slash) 3) if the response cannot be understood or doesn't match any valid kit size, set routine_number = 32 and ask them to choose from the available kit sizes, showing the options clearly 4) if a valid kit size is provided, set routine_number = 33 and ask them to choose a shirt number for {child_name}. Explain that shirt numbers range from 1 to 25, and ask what number they would prefer for their child. Also advise that if their child is a goalkeeper they will need to choose either number 1 or 12.""",
        
        33: """Task: Your current task is to: 1) take their response for the shirt number selection 2) validate that the response is a number between 1 and 25 (accept '1', 'one', 'number 7', etc. and convert to integer) 3) if the response is not a valid number between 1-25, set routine_number = 33 and ask them to choose a valid shirt number between 1 and 25 4) if a valid shirt number is provided, use the function 'check_shirt_number_availability' with the team name, age_group (extract both from conversation history), and requested_shirt_number to check if it's available 5) if the shirt number is already taken, set routine_number = 33 inform them that number is taken (whilst avoiding exposing the name of the player which has taken shirt number already), then ask them to choose a different number 6) if the shirt number is available, use the function update_kit_details_to_db to write kit details to db, set routine_number = 34, confirm kit details saved and explain that next they need to upload a passport-style photo for ID purposes by clicking the + symbol in the chat window and uploading a file.""",
        
        34: """Task: Your current task is to: 1) take their uploaded photo 2) validate that they have indeed uploaded an image of a junior or youth and that the image is the correct format (.jpg, .png, .heic, .webp) and it meets our requirement of being a passport style photo. Do not be too strict about this though, as it's only used as a proof of ID in a grassroots football league. If the photo is not valid for any reason then set routine_number = 34 and ask them to upload a valid image providing a reason why you have determined it not to be valid 3) if a valid image is provided, use the function 'upload_photo_to_s3' (adhering to the function schemas by extracting any information you need from the conversation history). 4) if the 'upload_photo_to_s3' returns successfully then use the function 'update_photo_link_to_db' to write the link to the db 5) once the db write has returned successfully, then set routine_number = 35, advise that photo uploaded successfully and registration has been completed pending payment and Direct Debit setup via the GoCardless link they received. Once payment is completed they will receive a confirmation SMS. If you use any coloured emoji spheres in your response, please only use blue or yellow ones as they reflect the club colours.""",
        
        35: """Task: Your current task is to respond to any query helpfully as the registration has now completed.""",
        
        # Future routines will be added here:
        # Additional routines can be added as needed
    }
    
    @classmethod
    def get_routine_message(cls, routine_number: int) -> str:
        """
        Get the routine message for a specific routine number.
        
        Args:
            routine_number: The routine step number
            
        Returns:
            The routine message string, or empty string if routine_number not found
        """
        return cls.ROUTINES.get(routine_number, "")
    
    @classmethod
    def get_available_routines(cls) -> list:
        """Get list of all available routine numbers."""
        return list(cls.ROUTINES.keys())
    
    @classmethod
    def is_valid_routine(cls, routine_number: int) -> bool:
        """Check if a routine number is valid."""
        return routine_number in cls.ROUTINES 